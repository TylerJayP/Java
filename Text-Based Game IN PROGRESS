import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Game {

    JFrame window;
    Container contain;
    JPanel userChoices, playerTop, playAgain;
    JLabel mainTitleName, secondaryTitleName, playerHpDisplay, KeyItemsDisplay, playerWeaponDisplay, youDiedTotals, wouldYouLike;
    Font titleNameFont = new Font("Times New Roman", Font.PLAIN, 66);
    Font secondaryNameFont = new Font("Times New Roman", Font.PLAIN, 30);
    Font startGameFont = new Font("Times New Roman", Font.PLAIN, 25);
    Font storyFont = new Font("Times New Roman", Font.PLAIN, 24);
    Font playerUI = new Font("Times New Roman", Font.PLAIN, 20);
    JButton startButton, userChoiceB1, userChoiceB2, userChoiceB3;
    JTextArea mainText;
    int playerHPDisplayed, itemsFound;

    String weaponOnHand;

    newScreenHandler tsHandler = new newScreenHandler();
    playerChoiceHandler playerChoiceHandler = new playerChoiceHandler();
    playAgainYesNoHandler playAgainYesNoHandler = new playAgainYesNoHandler();


    public static void main(String[] args) {

        new Game();

    }

    public Game() {
        //Creating GUI
        window = new JFrame();
        window.setResizable(false);
        window.getContentPane().setBackground(Color.black);
        window.setSize(800, 600);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setLayout(null);
        window.setVisible(true);
        contain = window.getContentPane();


        mainTitleName = new JLabel("DUNGEON ESCAPE");
        mainTitleName.setForeground(Color.white);
        mainTitleName.setFont(titleNameFont);
        mainTitleName.setBounds(100, 50, 600, 150);


        secondaryTitleName = new JLabel("THINK YOU CAN ESCAPE?");
        secondaryTitleName.setForeground(Color.white);
        secondaryTitleName.setFont(secondaryNameFont);
        secondaryTitleName.setBounds(200, 115, 500, 100);

        //Allows user to "Start Game" by using a listener
        startButton = new JButton("START GAME");
        startButton.setBackground(Color.black);
        startButton.setForeground(Color.white);
        startButton.setFont(startGameFont);
        startButton.addActionListener(tsHandler);
        startButton.setBounds(300, 300, 200, 45);
        startButton.setFocusPainted(false);


        contain.add(mainTitleName);
        contain.add(secondaryTitleName);
        contain.add(startButton);

    }

    public void createScreen() {
        //Hiding all titles and buttons on next screen from Menu
        mainTitleName.setVisible(false);
        secondaryTitleName.setVisible(false);
        startButton.setVisible(false);

        mainText = new JTextArea();
        mainText.setBackground(Color.black);
        mainText.setForeground(Color.white);
        mainText.setFont(storyFont);
        mainText.setBounds(100, 100, 800, 200);
        contain.add(mainText);

        //If they die displays how many items they found before they died.
        youDiedTotals = new JLabel();
        youDiedTotals.setBounds(400, 100, 500, 50);
        youDiedTotals.setFont(secondaryNameFont);
        youDiedTotals.setForeground(Color.white);
        contain.add(youDiedTotals);

        wouldYouLike = new JLabel();
        wouldYouLike.setBounds(300, 300, 200, 50);
        wouldYouLike.setForeground(Color.white);
        wouldYouLike.setFont(secondaryNameFont);
        contain.add(wouldYouLike);

        //Prompting user if they would like to play again
        playAgain = new JPanel();
        playAgain.setBounds(275, 300, 200, 50);
        playAgain.setBackground(Color.black);
        playAgain.setForeground(Color.white);
        playAgain.setFont(startGameFont);
        playAgain.setLayout(new GridLayout(1, 2));
        playAgain.setVisible(false);
        contain.add(playAgain);

        //Creating choices for user to decide what to do
        userChoices = new JPanel();
        userChoices.setBounds(225, 300, 300, 150);
        userChoices.setBackground(Color.black);
        userChoices.setLayout(new GridLayout(3, 1));
        contain.add(userChoices);

        //user choice 1 setup
        userChoiceB1 = new JButton();
        userChoiceB1.setBackground(Color.black);
        userChoiceB1.setForeground(Color.white);
        userChoiceB1.setFont(startGameFont);
        userChoiceB1.setFocusPainted(false);
        userChoiceB1.addActionListener(playerChoiceHandler);
        userChoices.add(userChoiceB1);

        //user choice 2 setup
        userChoiceB2 = new JButton();
        userChoiceB2.setBackground(Color.black);
        userChoiceB2.setForeground(Color.white);
        userChoiceB2.setFont(startGameFont);
        userChoiceB2.setFocusPainted(false);
        userChoiceB2.addActionListener(playerChoiceHandler);
        userChoices.add(userChoiceB2);

        //user choice 3 setup
        userChoiceB3 = new JButton();
        userChoiceB3.setBackground(Color.black);
        userChoiceB3.setForeground(Color.white);
        userChoiceB3.setFont(startGameFont);
        userChoiceB3.setFocusPainted(false);
        userChoiceB3.addActionListener(playerChoiceHandler);
        userChoices.add(userChoiceB3);

        //Top "UI" so users can see HP, Items, and Weapon
        playerTop = new JPanel();
        playerTop.setBounds(145, 5, 590, 75);
        playerTop.setBackground(Color.black);
        playerTop.setLayout(new GridLayout(1, 3));
        contain.add(playerTop);

        //Creating a section for each of these to be put on
        playerHpDisplay = new JLabel();
        playerWeaponDisplay = new JLabel();
        KeyItemsDisplay = new JLabel();

        playerHpDisplay.setForeground(Color.white);
        KeyItemsDisplay.setForeground(Color.white);
        playerWeaponDisplay.setForeground(Color.white);

        playerHpDisplay.setFont(playerUI);
        KeyItemsDisplay.setFont(playerUI);
        playerWeaponDisplay.setFont(playerUI);

        playerTop.add(playerHpDisplay);
        playerTop.add(KeyItemsDisplay);
        playerTop.add(playerWeaponDisplay);

        setupPlayer();

    }

    //Setting up how much HP, Items, and what weapon they have on hand at the start of the game
    public void setupPlayer() {
        playerHPDisplayed = 1;
        itemsFound = 0;
        weaponOnHand = "None";

        playerHpDisplay.setText("HP: " + playerHPDisplayed);
        KeyItemsDisplay.setText("Items: " + itemsFound + "/5");
        playerWeaponDisplay.setText("Weapon: " + weaponOnHand);


        dungeonStart();

    }

    //Start of game after user clicks "start games" button
    public void dungeonStart() {

        mainText.setText("You wake up in a pitch black room, can't see anything but 5" + "\n" +
                "feet in front of you. The only thing that you can remember is" + "\n" + "" +
                "that you stole a well-known valuable item from the city, and" + "\n" +
                "you were caught. You need to get out here, and fast. You do" + "\n" +
                "not want to find out what they are going to do to you. What" + "\n" +
                "are you going to do?");
        mainText.setBackground(Color.black);
        mainText.setForeground(Color.white);
        mainText.setFont(storyFont);
        mainText.setBounds(100, 100, 800, 200);

        userChoiceB1.setText("Look Around");
        userChoiceB1.setActionCommand("1");

        userChoiceB2.setText("Sleep");
        userChoiceB2.setActionCommand("2");

        userChoiceB3.setText("Do Nothing...");
        userChoiceB3.setActionCommand("3");


    }

    //user option look around
    public void lookAround() {
        mainText.setText("You look around and find a note. It reads:\n      " +
                "Day 46: I haven't found everything needed to escape\n      " +
                "the dungeon. If you are reading this, you have found\n      " +
                "the first key item to escaping the dungeon. There is\n      " +
                "a chest in the corner behind the cell. Figure out the\n      " +
                "code to open it, I think another key item is in there! -ML ");
        mainText.setBackground(Color.black);
        mainText.setForeground(Color.white);
        mainText.setFont(storyFont);
        mainText.setBounds(100, 100, 800, 200);

        itemsFound = 1;
        KeyItemsDisplay.setText("Items: " + itemsFound + "/5");

        userChoiceB1.setText("Look In The cell");
        userChoiceB1.setActionCommand("6");

        userChoiceB2.setText("Look Around Walls");
        userChoiceB2.setActionCommand("7");

        userChoiceB3.setText("Look In The Bathroom");
        userChoiceB3.setActionCommand("8");
        userChoiceB3.setVisible(true);

    }

    //user option look in cell
    public void lookCell() {
        mainText.setText("You enter the cell, there is a chest in the corner like the note said.\n" +
                "The lock is a 4-digit numerical pin. What would you like to do?");

        playerHPDisplayed = 1;
        itemsFound = 1;
        weaponOnHand = "None";

        playerHpDisplay.setText("HP: " + playerHPDisplayed);
        KeyItemsDisplay.setText("Items: " + itemsFound + "/5");
        playerWeaponDisplay.setText("Weapon: " + weaponOnHand);

        userChoiceB1.setText("Open Chest");
        userChoiceB1.setActionCommand("9");

        userChoiceB2.setText("Break Lock");
        userChoiceB2.setActionCommand("10");

        userChoiceB3.setText("Go Back...");
        userChoiceB3.setActionCommand("11");
        userChoiceB3.setVisible(true);


    }

    //user decides they want to open the chest
        public void openChest() {

        //Creating a dialog box for user to input the chest code
            String chestCode;
            chestCode = JOptionPane.showInputDialog("Please enter the 4-digit chest code: ");
            int chestCodeParse = Integer.parseInt(chestCode);

            //Validating that if user inputs the right code it goes to chestOpened() or if wrong, goes to wrongCode()
            if(chestCode.equals("8256")){
                chestOpened();
            }
            else{
                wrongCode();
            }

    }

    //If user inputs the right code, this screen will be displayed
        public void chestOpened(){

            mainText.setText("You have input the right code! ...");

            userChoiceB1.setText("Look For More Clues");
            userChoiceB1.setActionCommand("14");

            userChoiceB2.setText("...");
            userChoiceB2.setActionCommand("15");

            userChoiceB3.setText("...");
            userChoiceB3.setActionCommand("16");
            userChoiceB3.setVisible(true);

        }

        //If user inputs the wrong code, this screen will be displayed
        public void wrongCode(){

            mainText.setText("You have entered the wrong code. You can either try\n " +
                    "again or go back and look around for more clues to\n " +
                    "figure out the code! Remember this: 4");

                    userChoiceB1.setText("Try again?");
                    userChoiceB1.setActionCommand("12");

                    userChoiceB2.setText("Look For Clues");
                    userChoiceB2.setActionCommand("13");

                    userChoiceB3.setVisible(false);

        }

    //If user selected the option to sleep
    public void Sleep(){
        mainText.setText("You wake up the following morning. There is a bowl of food\n" +
                "that has been left for you, and a cup of water. You eat the \n" +
                "food and drink the water(You receive +3 HP.) You are feeling\n" +
                "hydrated and full. You are feeling more hydrated and full. You\n" +
                "are ready to escape the dungeon.");

        playerHPDisplayed = playerHPDisplayed + 3;
        playerHpDisplay.setText("HP: " + playerHPDisplayed);
        itemsFound = 0;
        KeyItemsDisplay.setText("Items: " + itemsFound + "/5");

        userChoiceB1.setText("Look Around");
        userChoiceB2.setText("Do Nothing...");
        userChoiceB3.setVisible(false);



    }

    //User selects do nothing and dies
    public void DoNothing(){

        mainText.setText("YOU HAVE DIED");
        mainText.setBackground(Color.black);
        mainText.setForeground(Color.white);
        mainText.setFont(titleNameFont);
        mainText.setBounds(130,100,800,75);


        playerHPDisplayed = playerHPDisplayed - 1;
        playerHpDisplay.setText("HP: " + playerHPDisplayed);
        itemsFound = 0;
        KeyItemsDisplay.setText("Items: " + itemsFound + "/5");

        youDiedTotals.setText("You collected a total of: " + itemsFound + " out of 5 items.");
        youDiedTotals.setBounds(145,140,500,100);

        wouldYouLike.setText("Would you like to play again?");
        wouldYouLike.setBounds(200,200,500,50);

        //Asking user if they would like to play again or just close
        playAgain.setVisible(true);

        userChoiceB1.setText("YES");
        userChoiceB1.addActionListener(playAgainYesNoHandler);
        userChoiceB1.setActionCommand("4");
        userChoiceB1.setFocusPainted(false);
        playAgain.add(userChoiceB1);

        userChoiceB2.setText("NO");
        userChoiceB2.addActionListener(playAgainYesNoHandler);
        userChoiceB2.setActionCommand("5");
        userChoiceB2.setFocusPainted(false);
        playAgain.add(userChoiceB2);

        userChoiceB3.setVisible(false);


    }

    //listener for START GAME
    public class newScreenHandler implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {

            createScreen();
        }
    }

    //listener for all choices' user makes
    public class playerChoiceHandler implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent event) {

            String yourChoice = event.getActionCommand();

            //First Level Choices -- Wanted to do a double switch function, but it kept giving me problems. Will debug to find solution.
                if (yourChoice.equals("1")) {
                    lookAround();
                }
                if (yourChoice.equals("2")) {
                    Sleep();
                }
                if (yourChoice.equals("3")) {
                    DoNothing();
                }
                //End Of First Level Choices

                //Second Level Choices
                if (yourChoice.equals("6")) {
                    lookCell();
                }
                if(yourChoice.equals("9"))
                    openChest();
                if (yourChoice.equals("11")) {
                    lookAround();
                }
                if(yourChoice.equals("12")) {
                    openChest();
                }
                if(yourChoice.equals("13")){
                    lookAround();
                }
            }
        }

        //Listener for if player wants to play again. Used dispose to force close JFrame on either option.
        public class playAgainYesNoHandler implements ActionListener {

            public void actionPerformed(ActionEvent event) {
                String playAgainYesNo = event.getActionCommand();

                if (playAgainYesNo == "4") {
                    new Game();
                    window.dispose();
                }
                if (playAgainYesNo == "5") {
                    window.dispose();
                }

            }

        }

    }



